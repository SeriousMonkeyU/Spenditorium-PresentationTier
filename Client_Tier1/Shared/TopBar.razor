@using global::Shared.DTO
@using Client_Tier1.Service
@using global::Shared.Models
@inject NavigationManager nav;
@inject IClientService _clientService;
@inject LocalClient lClient;

<img class="icon-client" src="images/client.png" alt="Authorize" onclick="@ToggleNavMenu">
@if (lClient.authorized == false)
{
    <div class="@TopMenuCssClass collapsed-content">
        <div class="collapsed-components">
            <p>Username: </p>
            <input type="text" id="username" name="username" minlength="3" @bind="Username" @oninput="@((e) => { Username = (string)e.Value; })" required>
            <p>Password: </p>
            <input type="password" id="password" name="password" minlength="3" @bind="Password" @oninput="@((e) => { Password = (string)e.Value; })" required>
            <div class="buttons">
                <button type="button" onclick="@TryLogin">Log In</button>
                <button type="button" onclick="@RedirectToRegister">Sign Up</button>
            </div>
        </div>
    </div>
}
else
{
    <div class="@TopMenuCssClass collapsed-content">
        <div class="collapsed-components">
            <div class="buttonsAuth">
                <button type="button" onclick="@RedirectToProfile">Profile page</button>
                <button type="button" onclick="@TryLogout">Logout</button>
            </div>
        </div>
    </div>
}

@code {
    private bool collapseAuthorize = true;
    private string? TopMenuCssClass => collapseAuthorize ? "collapse" : null;

    private string Username = "";
    private string Password = "";


    private void ToggleNavMenu()
    {
        collapseAuthorize = !collapseAuthorize;
    }

    private async void TryLogin()
    {
        if (Username.Length > 3 && Username.Length < 16 && Password.Length > 3 & Password.Length < 16)
        {
            await _clientService.LoginAsync(Username, Password);
            ToggleNavMenu();
            nav.NavigateTo("/");
        }
    }

    private async void TryLogout()
    {
        await _clientService.LogoutAsync();
    }

    private void RedirectToRegister()
    {
        ToggleNavMenu();
        nav.NavigateTo($"/authentication/register");
    }

    private void RedirectToProfile()
    {
        ToggleNavMenu();
        nav.NavigateTo($"/Profile");
    }

}