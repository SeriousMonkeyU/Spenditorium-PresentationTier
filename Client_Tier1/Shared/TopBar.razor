@using global::Shared.DTO
@using Client_Tier1.Service
@using global::Shared.Models
@inject NavigationManager nav;
@inject IClientService _clientService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<img class="icon-client" src="images/client.png" alt="Authorize" onclick="@ToggleNavMenu">
@if (authState == false)
{
    <div class="@TopMenuCssClass collapsed-content">
        <div class="collapsed-components unAuth">
            <p class="text-color-authorise">Username: </p>
            <input type="text" id="username" name="username" minlength="3" @bind="Username" @oninput="@((e) => { Username = (string)e.Value; })" required>
            <p class="text-color-authorise">Password: </p>
            <input type="password" id="password" name="password" minlength="3" @bind="Password" @oninput="@((e) => { Password = (string)e.Value; })" required>
            <div class="buttons">
                <div class="buttonAuthorised" type="button" onclick="@TryLogin">Log In</div>
                <div class="buttonAuthorised" type="button" onclick="@RedirectToRegister">Sign Up</div>
            </div>
            <p class="errorLabel">@error</p>
        </div>
    </div>
}

@if (authState)
{
    <div class="@TopMenuCssClass collapsed-content">
        <div class="collapsed-components doAuth">
            <div class="buttonAuthorised" type="button" onclick="@RedirectToProfile">Profile page</div>
            <div class="buttonAuthorised" type="button" onclick="@TryLogout">Logout</div>
        </div>
    </div>
}

@code {

    //-------------Auth var--------------------------

    private bool authState { get; set; } = false;
        private const string authStateName = "state";

    private int id { get; set; } = -1;
        private const string idName = "id";

    //-----------------------------------------------

    private bool collapseAuthorize = true;
    private string? TopMenuCssClass => collapseAuthorize ? "collapse" : null;

    private string Username = "";
    private string Password = "";

    private string error { get; set; } = "";


    private void ToggleNavMenu()
    {
        collapseAuthorize = !collapseAuthorize;
    }

    // Method makes a request to Business logic and adjusts Auth variables
    private async void TryLogin()
    {
        if (Username.Length > 3 && Username.Length < 16 && Password.Length > 3 & Password.Length < 16)
        {
            int tempId = await _clientService.LoginAsync(Username, Password);
            if (tempId != -1)
            {
                await localStorage.SetItemAsync(authStateName, true);
                await localStorage.SetItemAsync(idName, tempId);
                ToggleNavMenu();
                nav.NavigateTo($"/", forceLoad: true);
            }
            else
            {
                await localStorage.SetItemAsync(authStateName, false);
                await localStorage.SetItemAsync(idName, -1);
                error = "Invalid login credentials";
            }
            if (tempId == -2)
            {
                error = "Error when trying to login";
            }
        }
        else error = "Invalid login credentials";
    }

    // Method Resets Auth variables
    private async void TryLogout()
    {
        await localStorage.SetItemAsync<int>(idName, id);
        await localStorage.SetItemAsync<bool>(authStateName, false);
        nav.NavigateTo($"/", forceLoad: true);
    }

    private void RedirectToRegister()
    {
        ToggleNavMenu();
        nav.NavigateTo($"/authentication/register");
    }

    private void RedirectToProfile()
    {
        ToggleNavMenu();
        nav.NavigateTo($"/Profile");
    }


    // Method updates Auth variables
    protected override async Task OnInitializedAsync()
    {
        authState = await localStorage.GetItemAsync<bool>(authStateName);
        id = await localStorage.GetItemAsync<int>(idName);
    }
    }
