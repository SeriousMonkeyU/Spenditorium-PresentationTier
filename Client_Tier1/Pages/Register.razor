@page "/authentication/register"
@using global::Shared.DTO
@using HttpClient.Implementations

@inject NavigationManager Nav;
<div class="centered">
    <div class="mainHolder">
        <label for="fName">Full name: </label>
        <input type="text" id="fName" name="fullName" @bind="FName" @oninput="@((e) => { FName = (string)e.Value; })">
        <label for="email">Email: </label>
        <input type="text" id="email" name="email" @bind="Email" @oninput="@((e) => { Email = (string)e.Value; })">
        <label for="dob">Date of Birth: </label>
        <input type="date" id="dob" name="dob" @bind="Dob" @oninput="@((e) => { Dob = (DateTime)e.Value; })">
        <label for="phone">Phone number: </label>
        <input type="text" id="phone" name="phoneNumber" @bind="Pn" @oninput="@((e) => { Pn = (long)e.Value; })">
        <label for="username">Username: </label>
        <input type="text" id="username" name="username" minlength="3" @bind="Username" @oninput="@((e) => { Username = (string)e.Value; })" required>
        <label for="password">Password: </label>
        <input type="password" id="password" name="password" minlength="3" @bind="Password" @oninput="@((e) => { Password = (string)e.Value; })" required>
        <button id="Register" @onclick="TryRegistration" class="Btn" IsToggle="false">Sign Up</button>
        <label for="Register">@error</label>
    </div>
</div>

@code {
    private string Username { get; set; } = "";
    private string Password { get; set; } = "";

    private string FName { get; set; } = "";
    private string Email { get; set; } = "";
    private DateTime Dob { get; set; } = new(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    private long Pn { get; set; } = 11111111;

    private string error { get; set; } = "";


    private async Task TryRegistration()
    {
        if ((Username.Length > 3 && Username.Length < 16) && (Password.Length > 3 && Password.Length < 16) && (FName.Length > 1 && FName.Length < 50) && (Email.Contains("@") && Email.Length > 3 && Email.Length < 50) && (Pn > 9999999 && Pn < 100000000))
        {
            string tempdob = Dob.ToShortDateString();
            error = tempdob;
            ClientCreation account = new ClientCreation(Username, Password, FName, Email, tempdob, Pn);
            HttpClient httpClient = new HttpClient();
            ClientHttpClient clientCreation = new ClientHttpClient(httpClient);
            await clientCreation.Create(account);
            Nav.NavigateTo($"/");
        }
        else error = "Invalid Input credentials";
    }
    } 